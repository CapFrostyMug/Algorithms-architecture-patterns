<?php

/* ЗАДАНИЕ 1 */

// Сортировку на миллион элементов так и не дождался, поэтому сократил количество элементов до 300 тыс.
// Ниже представлена сравнительная таблица затраченого времени на сортировку массива в 30 и 300 тысяч элементов:
//
// > Пузырьком___________18.78 | 2086.69 | в 111 раз
// > Вставками___________52.36 | 5299.13 | в 101 раз
// > Расческой___________0.13  | 1.67    | в 13 раз
// > Слиянием____________0.18  | 22.15   | в 123 раза
// > Пирамидальная_______0.13  | 1.64    | в 13 раз
// > Пирамидальная SPL___0.01  | 0.18    | в 18 раз
// > Быстрая (наша)______0.04  | 0.50    | в 12 раз
// > Быстрая (чужая)_____0.02  | 0.32    | в 16 раз
// > PHP_________________0.005 | 0.06    | в 12 раз
// > Выбором_____________19.27 | 1929.05 | в 100 раз
// > Голубиная___________0.008 | 0.12    | в 15 раз


/* ЗАДАНИЕ 2 */

// Метод удаления элемента из массива.

function deleteNum($num, $range)
{

    $arr = [];
    $flag = false;

    for ($i = 0; $i < $range; $i++) {
        $arr[] = mt_rand(1, $range);
    }

    foreach ($arr as $key => $value) {
        if ($value == $num) {
            unset($arr[$key]);
            $flag = true;
        }
    }

    if ($flag) {
        array_values($arr);
        echo "Искомое число и его дубликаты УДАЛЕНЫ" . PHP_EOL;
    } else {
        echo "Искомое число НЕ НАЙДЕНО" . PHP_EOL;
    }

}

// Аргументы: 1) Какое число ищем; 2) Диапазон чисел.
deleteNum(148522, 1000000);


/* ЗАДАНИЕ 3 */

// Количество шагов (итераций) при поиске в массиве на 10 тыс. элементов:
//
// > Линейный поиск_____________83
// > Бинарный поиск_____________13
// > Интерполяционный поиск______3
